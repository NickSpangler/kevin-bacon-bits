[{"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/reportWebVitals.js":"1","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/App.js":"2","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/FilmographyChallenge.js":"3","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/SixDegreesSearch.js":"4","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/SixDegreesChallenge.js":"5","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/Nav.js":"6","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/Home.js":"7","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetAInput.js":"8","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/index.js":"9","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetBInput.js":"10","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetAPhoto.js":"11","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetBPhoto.js":"12","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/SearchResults.js":"13","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/searchReducer.js":"14","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/store.js":"15","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/searchActions.js":"16","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/Level.js":"17","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/ActorSelect.js":"18","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/filmographyReducer.js":"19","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/filmographyActions.js":"20","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/OptionsContainer.js":"21","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/RoundResult.js":"22","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/History.js":"23","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/settingsReducer.js":"24","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/settingsActions.js":"25","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/StartingPoint.js":"26","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/SelectDegree.js":"27","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/sixDegreesChallengeActions.js":"28","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/sixDegreesChallengeReducer.js":"29","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/ResetButtons.js":"30","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/ChallengeOptionsContainer.js":"31","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelOneChallenge.js":"32","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelTwoChallenge.js":"33","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelThreeChallenge.js":"34","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LoadingAnswer.js":"35"},{"size":362,"mtime":1607958149880,"results":"36","hashOfConfig":"37"},{"size":1058,"mtime":1608689620087,"results":"38","hashOfConfig":"37"},{"size":2225,"mtime":1608925219236,"results":"39","hashOfConfig":"37"},{"size":1767,"mtime":1609178452839,"results":"40","hashOfConfig":"37"},{"size":3688,"mtime":1610482238900,"results":"41","hashOfConfig":"37"},{"size":1904,"mtime":1610642178848,"results":"42","hashOfConfig":"37"},{"size":2422,"mtime":1608921423977,"results":"43","hashOfConfig":"37"},{"size":1819,"mtime":1609864037483,"results":"44","hashOfConfig":"37"},{"size":408,"mtime":1608223008153,"results":"45","hashOfConfig":"37"},{"size":1824,"mtime":1609809765637,"results":"46","hashOfConfig":"37"},{"size":540,"mtime":1609863688635,"results":"47","hashOfConfig":"37"},{"size":540,"mtime":1609948676021,"results":"48","hashOfConfig":"37"},{"size":653,"mtime":1608772536386,"results":"49","hashOfConfig":"37"},{"size":566,"mtime":1608310742335,"results":"50","hashOfConfig":"37"},{"size":755,"mtime":1609969827311,"results":"51","hashOfConfig":"37"},{"size":728,"mtime":1609178455828,"results":"52","hashOfConfig":"37"},{"size":2341,"mtime":1608763722373,"results":"53","hashOfConfig":"37"},{"size":2705,"mtime":1610644142054,"results":"54","hashOfConfig":"37"},{"size":2876,"mtime":1608755946935,"results":"55","hashOfConfig":"37"},{"size":1168,"mtime":1610644161457,"results":"56","hashOfConfig":"37"},{"size":2078,"mtime":1609178449717,"results":"57","hashOfConfig":"37"},{"size":2730,"mtime":1610644126306,"results":"58","hashOfConfig":"37"},{"size":878,"mtime":1613770502217,"results":"59","hashOfConfig":"37"},{"size":251,"mtime":1608924376605,"results":"60","hashOfConfig":"37"},{"size":86,"mtime":1608924455269,"results":"61","hashOfConfig":"37"},{"size":2228,"mtime":1610140383002,"results":"62","hashOfConfig":"37"},{"size":865,"mtime":1610129574506,"results":"63","hashOfConfig":"37"},{"size":3014,"mtime":1610476806458,"results":"64","hashOfConfig":"37"},{"size":3557,"mtime":1610476730689,"results":"65","hashOfConfig":"37"},{"size":513,"mtime":1610387069228,"results":"66","hashOfConfig":"37"},{"size":3401,"mtime":1610476875189,"results":"67","hashOfConfig":"37"},{"size":5432,"mtime":1610468888041,"results":"68","hashOfConfig":"37"},{"size":14911,"mtime":1610481385831,"results":"69","hashOfConfig":"37"},{"size":22442,"mtime":1610481655495,"results":"70","hashOfConfig":"37"},{"size":347,"mtime":1610476653770,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"19blby2",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"87"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"87"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"87"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/reportWebVitals.js",[],["160","161"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/App.js",[],["162","163"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/FilmographyChallenge.js",[],["164","165"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/SixDegreesSearch.js",[],["166","167"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/SixDegreesChallenge.js",["168"],"import React from 'react';\nimport { Button, Space } from 'antd';\nimport StartingPoint from './StartingPoint';\nimport SelectDegree from './SelectDegree';\nimport { connect } from 'react-redux';\nimport { setTargetA, setDegree, startChallenge, resetChallenge, updateFirstDegreeLink, checkAnswer, checkAnswer2, checkAnswer3, tryAgain } from '../../redux/actions/sixDegreesChallengeActions'\nimport Loading from './Loading'\nimport ChallengeOptionsContainer from './ChallengeOptionsContainer'\n\nfunction SixDegreesChallenge(props) {\n\n    const tryAgain = () => {\n        props.tryAgain()\n        document.documentElement.scrollTop = 0;\n    }\n\n    const challengeButton = props.target_a === 'not selected' || props.loading === true || props.challenge_active === true ? (<></>) : (<Button type='primary' onClick={() => props.startChallenge(props.target_a.id, props.degree)}>Challenge Me!</Button>)\n    const tryAgainButton = props.showing_result === true ? (<Button type='primary' onClick={tryAgain} >{`Try again with ${props.target_a.name}`}</Button>) : (<></>)\n    return (\n        <>\n        <div className='challenge-container'>\n        <div className='challenge-content'>\n            <h1 style={{color: 'white'}}>Build the link between two actors:</h1>\n            <div className='slide-in-bottom'>\n                <StartingPoint setTargetA={props.setTargetA} challenge_active={props.challenge_active} resetChallenge={props.resetChallenge} />\n            </div>\n            <div className='slide-in-top'>\n                <br></br>\n                <SelectDegree setDegree={props.setDegree} loading={props.loading} challenge_active={props.challenge_active} />\n            </div>\n            <Loading loading={props.loading} />\n            <ChallengeOptionsContainer \n            degree={props.degree} \n            target_a={props.target_a} \n            target_b={props.target_b} \n            first_degree_link={props.first_degree_link} \n            second_degree_link={props.second_degree_link}\n            updateFirstDegreeLink={props.updateFirstDegreeLink} \n            checkAnswer={props.checkAnswer} \n            checkAnswer2={props.checkAnswer2} \n            checkAnswer3={props.checkAnswer3} \n            showing_result={props.showing_result} \n            first_degree_result={props.first_degree_result} \n            second_degree_result={props.second_degree_result} \n            third_degree_result={props.third_degree_result} \n            loading={props.loading} \n            loading_answer={props.loading_answer}\n            />\n            {tryAgainButton}\n            <br></br>\n            {challengeButton}\n            \n        </div>\n        </div>\n        </>\n    )\n}\n\nconst mapStateToProps = ({ sixDegreesChallenge, settings }) => {\n    return {\n        target_a: sixDegreesChallenge.target_a,\n        degree: sixDegreesChallenge.degree,\n        target_b: sixDegreesChallenge.target_b,\n        first_degree_link: sixDegreesChallenge.first_degree_link,\n        first_degree_result: sixDegreesChallenge.first_degree_result,\n        second_degree_result: sixDegreesChallenge.second_degree_result,\n        third_degree_result: sixDegreesChallenge.third_degree_result,\n        link_message: sixDegreesChallenge.link_message,\n        showing_result: sixDegreesChallenge.showing_result,\n        challenge_active: sixDegreesChallenge.challenge_active,\n        loading: sixDegreesChallenge.loading,\n        loading_answer: sixDegreesChallenge.loading_answer,\n        sound: settings.sound\n    }\n}\n\nexport default connect(mapStateToProps, { setTargetA, setDegree, startChallenge, resetChallenge, updateFirstDegreeLink, checkAnswer, checkAnswer2, checkAnswer3, tryAgain })(SixDegreesChallenge)",["169","170"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/Nav.js",["171"],"import '../css/Nav.css';\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Badge } from 'antd'\nimport { connect } from 'react-redux';\nimport { SoundOutlined, SoundTwoTone } from '@ant-design/icons';\nimport { toggleSound } from '../redux/actions/settingsActions'\nimport useSound from 'use-sound';\nimport buttonDown from '../sounds/pop_1.mp3'\nimport buttonUp from '../sounds/pop_2.mp3'\n\n\nfunction Nav(props) {\n    const [playDown] = useSound(\n        buttonDown,\n        { volume: 0.25 }\n      );\n      const [playUp] = useSound(\n        buttonUp,\n        { volume: 0.25 }\n      );\n    //   const [playOff] = useSound(\n    //     '/sounds/pop-up-off.mp3',\n    //     { volume: 0.25 }\n    //   );\n\n    const soundOff = <SoundOutlined className='soundIcon' style={{color: 'grey'}} onClick={props.toggleSound} onMouseDown={playDown} onMouseUp={playUp}/>\n    const soundOn = <SoundTwoTone className='soundIcon' onClick={props.toggleSound} onMouseDown={playDown} onMouseUp={playUp}/>\n    const soundIcon = props.sound === true ? soundOn : soundOff\n\n    return (\n        <div className=\"demo\">\n            <div className=\"demo-nav\">\n                <Link to='/'>Home</Link>\n                <Link to='/six-degrees-search'>Six Degrees Search</Link>\n                <Link to='/six-degrees-challenge'>Six Degrees Challenge</Link>\n                {/* <Badge count={props.total_history} offset={[10, 10]} size=\"small\"> */}\n                <Link to='/filmography-challenge' style={{fontSize: 'large'}}>Filmography Challenge</Link>\n                {/* </Badge> */}\n                { soundIcon }\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({filmography, settings}) => {\n    return ({\n        total_history: filmography.total_history,\n        sound: settings.sound\n    })\n}\n\nexport default connect(mapStateToProps, { toggleSound })(Nav)","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/Home.js",["172","173"],"import React from 'react'\nimport { Typography, Divider } from 'antd';\nimport '../css/animista.css'\nimport Logo from '../images/edited-logo2.png'\n\nconst { Title, Paragraph, Text} = Typography;\n\n\nexport default function Home() {\n    return (\n        <div className='home-container'>\n            <div className='home-content fade-in'>\n            <br></br><br></br><br></br>\n            <br></br><br></br><br></br>\n            <br></br><br></br>\n                <div id=\"f1_container\">\n                    <div id=\"f1_card\" class=\"shadow\">\n                        <div class=\"front face\">\n                        <img src={ Logo } width='600px'></img>\n                        </div>\n                        <div class=\"back face center\">\n                            <br></br>\n                            <Typography>\n                                <Title>Welcome to Kevin Bacon Bits</Title>\n                                <br></br>\n                                <Paragraph>\n                                    <Text strong underline>Six Degrees Search:</Text> search any two actors in our database \n                                    and see if they can be connected with six degrees of separation or less.\n                                </Paragraph>\n                                <Paragraph>\n                                    <Text strong underline>Six Degrees Challenge:</Text> choose an actor and a number of \n                                    degrees you want to be challenged by, and we'll tell you who to connect them with.\n                                </Paragraph>\n                                <Paragraph>\n                                    <Text strong underline>Filmography Challenge:</Text> choose an actor and we'll \n                                    test your knowledge of their filmography by making you select posters from the films they've been in.\n                                </Paragraph>\n                                <Paragraph>\n                                    Good luck!\n                                </Paragraph>\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n\n\n\n\n\n\n\n\n\n\n\n\n            {/* <div className='logo-container heartbeat'>\n                <img src={ Logo } width='600px'></img>\n            </div>\n            <div> */}\n            {/* </div> */}\n            </div>\n        </div>\n    )\n}\n",["174","175"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetAInput.js",["176"],"import React, { useState } from 'react';\nimport { AutoComplete, Space } from 'antd';\nimport TargetAPhoto from './TargetAPhoto'\nimport silhouette from './silhouette.png'\n\nconst TargetAInput = (props) => {\n\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const [source, setSource] = useState('')\n\n  const onSearch = (searchText) => {\n    fetch(`http://localhost:3000/actors/auto_complete?input=${searchText}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setOptions(\n      !searchText ? [] : data.map(person => (\n        { value: \n            <div className='autocomplete-container' actor_id={person.id} profile_path={person.profile_path} name={person.name}>\n              <div className='autocomplete-one'>{person.name}</div>\n              <div className='autocomplete-two'>\n                <img src={person.profile_path ? `https://image.tmdb.org/t/p/w200${person.profile_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n            }\n        ))\n      )\n    })\n  };\n\n  const onSelect = (data) => {\n    fetch(`http://localhost:3000/actors/get_photo?input=${data.props.actor_id}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setValue(data.name)\n      setSource(data.profile_path)\n      props.updateTargetA(data.id)\n    })\n\n  };\n\n  const onChange = (data) => {\n    if (typeof data !== 'object') {\n    setValue(data);\n    }\n  };\n\n  return (\n    <>\n      <Space>\n      <TargetAPhoto source={source} />\n      <AutoComplete\n        value={value}\n        options={options}\n        style={{\n          width: 200,\n        }}\n        onSelect={onSelect}\n        onSearch={onSearch}\n        onChange={onChange}\n        placeholder=\"Find the link from...\"\n      />\n      \n      </Space>\n    </>\n  );\n};\n\nexport default TargetAInput;",["177","178"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/index.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetBInput.js",["179"],"import React, { useState } from 'react';\nimport { AutoComplete, Space } from 'antd';\nimport TargetBPhoto from './TargetBPhoto'\nimport silhouette from './silhouette.png'\n\nconst TargetBInput = (props) => {\n\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const [source, setSource] = useState('')\n\n  const onSearch = (searchText) => {\n    fetch(`http://localhost:3000/actors/auto_complete?input=${searchText}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setOptions(\n      !searchText ? [] : data.map(person => (\n        { value: \n          <div className='autocomplete-container' actor_id={person.id} profile_path={person.profile_path} name={person.name}>\n              <div className='autocomplete-one'>{person.name}</div>\n              <div className='autocomplete-two'>\n                <img src={person.profile_path ? `https://image.tmdb.org/t/p/w200${person.profile_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n        }\n        ))\n      )\n    })\n  };\n\n  const onSelect = (data) => {\n    console.log('onSelect', data);\n    fetch(`http://localhost:3000/actors/get_photo?input=${data.props.actor_id}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setValue(data.name)\n      setSource(data.profile_path)\n      props.updateTargetB(data.id)\n    })\n\n  };\n\n  const onChange = (data) => {\n    if (typeof data !== 'object') {\n    setValue(data);\n    }\n  };\n\n  return (\n    <>\n    <Space>\n      <AutoComplete\n        value={value}\n        options={options}\n        style={{\n          width: 200,\n        }}\n        onSelect={onSelect}\n        onSearch={onSearch}\n        onChange={onChange}\n        placeholder=\"...to\"\n        />\n      <TargetBPhoto source={source} />\n      </Space>\n    </>\n  );\n};\n\nexport default TargetBInput","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetAPhoto.js",["180","181"],"import React from 'react'\nimport silhouette from './silhouette.png'\n\nconst TargetAPhoto = (props) => {\n    if (props.source === '') {\n        return (\n            <img src={silhouette} height='100px'></img>\n        )\n    } else if (props.source === null) {\n        return (\n            <img src={silhouette} height='100px'></img>\n            )\n    } \n    else {\n        return (\n            <img src={`https://image.tmdb.org/t/p/w200${props.source}`} alt={silhouette} height='100px'></img>\n            )\n    }\n}\n\nexport default TargetAPhoto","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/TargetBPhoto.js",["182","183"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/SearchResults.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/searchReducer.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/store.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/searchActions.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-search/Level.js",["184","185","186"],"import React from 'react'\nimport { RightCircleTwoTone } from '@ant-design/icons';\nimport { Row, Col, Divider, Typography } from 'antd';\nimport silhouette from './silhouette.png'\n\nconst { Text } = Typography\n\nexport default function Level(props) {\n    const degrees = props.degree === 1 ? \"Degree\" : \"Degrees\"\n    const target_a_path = props.data.target_a.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.data.target_a.profile_path}`)\n    const target_b_path = props.data.target_b.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.data.target_b.profile_path}`)\n    const level_class = props.degree % 2 === 0 ? 'slide-in-right' : 'slide-in-left'\n    return (\n        <div className={`${level_class} level-tier`}>\n            <Divider orientation=\"center\">{`${props.degree} ${degrees}`}</Divider>\n            <Row gutter={20} type=\"flex\" align=\"middle\">\n                <Col className=\"gutter-row\" span={4} offset={4}>\n                    <div>\n                    <img src={target_a_path} height='200px'></img>\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                    <img src={`https://image.tmdb.org/t/p/w200${props.data.movie.poster_path}`} height='200px'></img>\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                        <img src={target_b_path} height='200px'></img>\n                    </div>\n                </Col>\n            </Row>\n            <br></br>\n            <p sytle='text-align: center'><Text keyboard>{`${props.data.target_a.name}`}</Text>{`  (as ${props.data.target_a.character}) was in  `}<Text keyboard>{`${props.data.movie.title}`}</Text>{` with `}<Text keyboard>{`${props.data.target_b.name}`}</Text>{` (as ${props.data.target_b.character}).`}</p>\n        </div>\n    )\n}\n\n","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/ActorSelect.js",["187","188","189"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/filmographyReducer.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/filmographyActions.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/OptionsContainer.js",["190"],"import React from 'react'\nimport { Space, Popconfirm } from 'antd';\nimport useSound from 'use-sound';\nimport Win from '../../sounds/zapsplat_multimedia_game_sound_synth_bright_pluck_digital_award_achievement_008_40718.mp3'\nimport Fail from '../../sounds/multimedia_game_sound_synth_tone_bold_fail_52993.mp3'\nimport Fanfare from '../../sounds/final_fanfare.mp3'\n\nconst OptionsContainer = (props) => {\n\n\n\n    const [winSound] = useSound(Win, { volume: 0.25 });\n    const [failSound] = useSound(Fail, { volume: 0.25 });\n    const [finalFanfare] = useSound(Fanfare, { volume: 0.25 });\n\n    const makeChoice = (choice) => {\n        if (choice === props.film.title) {\n            if (props.sound === true) {\n                props.actor_movies.length === 0 ? finalFanfare() : winSound()\n            }\n            props.rightAnswer()\n        } else {\n            if (props.sound === true) failSound();\n            props.wrongAnswer()\n        }\n    }\n\n    if (props.possible_answers.length === 0) {\n        return (\n            <></>\n    )} else {\n        return (\n            <>\n                <p>Which of these films featured {props.actor.name} in {props.film.release_year}?</p>\n                <Space>\n                    {props.possible_answers.map( option => {\n                        return (\n                            <div className='slide-in-elliptic-top-fwd'>\n                            <Popconfirm title={`Are you sure ${props.actor.name.split(' ')[0]} was in ${option.title}?`} \n                            okText=\"Yes\" \n                            cancelText=\"No\" \n                            placement=\"bottom\"\n                            onConfirm={() => makeChoice(option.title)}\n                            data='you found me'>\n                                <img src={`https://image.tmdb.org/t/p/w200${option.poster_path}`} height='250px'></img>\n                            </Popconfirm>\n                            </div>)}\n                        )\n                    }\n                </Space>\n            </>\n        )\n    }\n}\n\nexport default OptionsContainer\n","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/RoundResult.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/filmography-challenge/History.js",["191"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/settingsReducer.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/settingsActions.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/StartingPoint.js",["192","193"],"import React, { useState } from 'react';\nimport { AutoComplete, Space } from 'antd';\nimport silhouette from './silhouette.png'\nimport ResetButtons from './ResetButtons'\n\nconst StartingPoint = (props) => {\n\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const [source, setSource] = useState('')\n\n  const onSearch = (searchText) => {\n    fetch(`http://localhost:3000/actors/auto_complete?input=${searchText}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setOptions(\n      !searchText ? [] : data.map(person => (\n        { value: \n            <div className='autocomplete-container' actor_id={person.id} profile_path={person.profile_path} name={person.name}>\n              <div className='autocomplete-one'>{person.name}</div>\n              <div className='autocomplete-two'>\n                <img src={person.profile_path ? `https://image.tmdb.org/t/p/w200${person.profile_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n            }\n        ))\n      )\n    })\n  };\n\n  const onSelect = (data) => {\n    fetch(`http://localhost:3000/actors/get_photo?input=${data.props.actor_id}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setValue (data.name)\n      setSource(data.profile_path)\n      props.setTargetA(data.id) \n    })\n  };\n\n  const onChange = (data) => {\n    if (typeof data !== 'object') {\n    setValue(data);\n    }\n  };\n\n  const starting_point_photo = source === '' || source === null ? (<img src={silhouette} height='200px'></img>) : (<img src={`https://image.tmdb.org/t/p/w200${source}`} alt={silhouette} height='200px'></img>)\n\n  const input_or_buttons = props.challenge_active ? (\n    <ResetButtons resetChallenge={props.resetChallenge} setSource={setSource} setValue={setValue}/>\n  ) : (\n    <AutoComplete\n        value={value}\n        options={options}\n        style={{\n          width: 200,\n        }}\n        onSelect={onSelect}\n        onSearch={onSearch}\n        onChange={onChange}\n        placeholder=\"Select a Starting Point...\"\n      />\n  )\n\n  return (\n    <>\n      <Space direction=\"vertical\">\n      {starting_point_photo}\n      {input_or_buttons}\n      </Space>\n    </>\n  );\n};\n\nexport default StartingPoint;","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/SelectDegree.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/actions/sixDegreesChallengeActions.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/redux/reducers/sixDegreesChallengeReducer.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/ResetButtons.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/ChallengeOptionsContainer.js",[],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelOneChallenge.js",["194","195","196","197","198","199"],"import React, { useState } from 'react';\nimport { RightCircleTwoTone } from '@ant-design/icons';\nimport { Row, Col, Divider, Typography, AutoComplete, Button } from 'antd';\nimport silhouette from './silhouette.png'\nimport poster_silhouette from './poster_silhouette.png'\nimport SearchResults from '../six-degrees-search/SearchResults'\n\nconst { Text } = Typography\n\nexport default function LevelOneChallenge(props) {\n    const target_a_path = props.target_a.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.target_a.profile_path}`)\n    const target_b_path = props.target_b.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.target_b.profile_path}`)\n    \n    const level_class = 'slide-in-right'\n    const background_class = props.showing_result === false ? ('challenge-level-tier') : (props.first_degree_result.result === false ? ('wrong-answer') : ('right-answer'))\n\n    const target_a_movies = props.target_a.movies.map(movie => (\n        {value:\n            <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n              <div className='challenge-autocomplete-one'>{movie.title}</div>\n              <div className='challenge-autocomplete-two'>\n                <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n        }\n    ))\n\n    const [value, setValue] = useState('');\n    const [options, setOptions] = useState(target_a_movies);\n    const [source, setSource] = useState('')\n\n    const onChange = (data) => {\n        if (typeof data !== 'object') {\n        setValue(data);\n        }\n      };\n\n    const onSearch = (searchText) => {\n    fetch(`http://localhost:3000/movies/auto_complete?input=${searchText}&actor_id=${props.target_a.id}`)\n    .then(resp => resp.json())\n    .then(data => {\n      setOptions(\n      !searchText ? target_a_movies : data.map(movie => (\n        { value: \n            <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n              <div className='challenge-autocomplete-one'>{movie.title}</div>\n              <div className='challenge-autocomplete-two'>\n                <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n            }\n        ))\n      )\n    })\n  };\n\n    const onSelect = (data) => {\n        setValue(data.props.title)\n        setSource(data.props.poster_path)\n        props.updateFirstDegreeLink(props.target_a.id, data.props.movie_id, props.target_b.id)\n    };\n\n    const movie_poster = source === '' || source === null ? (<img src={poster_silhouette} height='200px'></img>) : (<img src={`https://image.tmdb.org/t/p/w200${source}`} alt={poster_silhouette} height='200px'></img>)\n    const message = props.showing_result !== true ? (\n      <p sytle='text-align: center'><Text keyboard>{`${props.target_a.name}`}</Text>{` was in what movie with `}<Text keyboard>{`${props.target_b.name}`}</Text>?</p>\n    ) : (\n      <p className='result-message' >{props.first_degree_result.message}</p>\n    )\n    const auto_complete_or_nothing = props.showing_result === true ? (\n      <><br></br></>\n    ) : (\n      <AutoComplete\n                value={value}\n                options={options}\n                style={{\n                width: 300,\n                marginBottom: '12px'\n                }}\n                onChange={onChange}\n                onSearch={onSearch}\n                onSelect={onSelect}\n                placeholder=\"Select a Movie...\"\n            />\n    )\n\n    const search_results_or_nothing = props.showing_result === true && props.first_degree_result.result === false ? (<><Divider orientation=\"center\" style={{color: 'white'}}>HERE'S ONE POSSIBLE LINK:</Divider><SearchResults results={props.first_degree_result.results} loading={props.loading} /></>) : (<></>)\n\n    return (\n        <>\n        <div className={`${level_class} ${background_class}`}>\n            <Divider orientation=\"center\">1 Degree</Divider>\n            <Row gutter={20} type=\"flex\" align=\"middle\">\n                <Col className=\"gutter-row\" span={4} offset={4}>\n                    <div>\n                    <img src={target_a_path} height='200px'></img>\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                    {movie_poster}\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                        <img src={target_b_path} height='200px'></img>\n                    </div>\n                </Col>\n            </Row>\n            <br></br>\n            {auto_complete_or_nothing}\n            <br></br>\n            <br></br>\n            { message }    \n        </div>\n        {search_results_or_nothing}\n        </>\n    )\n}\n","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelTwoChallenge.js",["200","201","202","203","204","205","206","207","208","209","210","211","212"],"import React, { useState } from 'react';\nimport { RightCircleTwoTone } from '@ant-design/icons';\nimport { Row, Col, Divider, Typography, AutoComplete, Button } from 'antd';\nimport silhouette from './silhouette.png'\nimport poster_silhouette from './poster_silhouette.png'\nimport SearchResults from '../six-degrees-search/SearchResults'\n\nconst { Text } = Typography\n\nexport default function LevelOneChallenge(props) {\n    const target_a_path = props.target_a.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.target_a.profile_path}`)\n    const target_b_path = props.target_b.profile_path === null ? silhouette : (`https://image.tmdb.org/t/p/w200${props.target_b.profile_path}`)\n    const level_class = 'slide-in-right'\n    const background_class = props.showing_result === false ? ('challenge-level-tier') : (props.first_degree_result.result === false ? ('wrong-answer') : ('right-answer'))\n    const background_class2 = props.showing_result === false ? ('challenge-level-tier') : (props.second_degree_result.result === false ? ('wrong-answer') : ('right-answer'))\n\n    const [answer, setAnswer] = useState({\n        target_a_id: '',\n        movie_one_id: '',\n        target_c_id: '',\n        movie_two_id: '',\n        target_b_id: ''\n    });\n\n    const submitAnswer = () => {\n        props.checkAnswer2(answer)\n    }\n    const submit_button = answer.target_a_id === '' ||\n                          answer.movie_one_id === '' ||\n                          answer.target_c_id === '' ||\n                          answer.movie_two_id === '' ||\n                          answer.target_b_id === '' ||\n                          props.showing_result === true ? (<></>) : (<Button type='primary' onClick={submitAnswer}>Submit Answer</Button>)\n\n\n    // <----------------LEVEL ONE MOVIE SELECTION ------------------>\n    const target_a_movies = props.target_a.movies.map(movie => (\n        {value:\n            <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n              <div className='small-challenge-autocomplete-one'>{movie.title}</div>\n              <div className='challenge-autocomplete-two'>\n                <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n        }\n    ))\n\n    const [l1Mvalue, l1MsetValue] = useState('');\n    const [l1Moptions, l1MsetOptions] = useState(target_a_movies);\n    const [l1Msource, l1MsetSource] = useState('')\n\n    const l1MonChange = (data) => {\n        if (typeof data !== 'object') {\n            l1MsetValue(data);\n        }\n      };\n\n    const l1MonSearch = (searchText) => {\n        fetch(`http://localhost:3000/movies/auto_complete?input=${searchText}&actor_id=${props.target_a.id}`)\n        .then(resp => resp.json())\n        .then(data => {\n            l1MsetOptions(\n        !searchText ? target_a_movies : data.map(movie => (\n            { value: \n                <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n                <div className='small-challenge-autocomplete-one'>{movie.title}</div>\n                <div className='challenge-autocomplete-two'>\n                    <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n                </div>\n                </div>\n                }\n            )))\n        })\n    };\n\n    const l1MonSelect = (data) => {\n        l1MsetValue(data.props.title)\n        l1MsetSource(data.props.poster_path)\n        // props.updateFirstDegreeLink(props.target_a.id, data.props.movie_id, props.target_b.id)\n        setAnswer({...answer, target_a_id: props.target_a.id, movie_one_id: data.props.movie_id})\n    };\n\n    const l1movie_poster = l1Msource === '' || l1Msource === null ? (<img class='with-auto-complete' src={poster_silhouette} height='200px'></img>) : (<img class='with-auto-complete' src={`https://image.tmdb.org/t/p/w200${l1Msource}`} alt={poster_silhouette} height='200px'></img>)\n    \n    const l1message = props.showing_result !== true ? (\n      <p sytle='text-align: center'><Text keyboard>{`${props.target_a.name}`}</Text>{` was in what movie with which actor?`}</p>\n    ) : (\n      <p className='result-message' >{props.first_degree_result.message}</p>\n    )\n    const l1Mauto_complete_or_nothing = props.showing_result === true ? (\n      <><br></br></>\n    ) : (\n      <AutoComplete\n                value={l1Mvalue}\n                options={l1Moptions}\n                style={{   \n                width: 230,\n                marginTop: '10px',\n                marginBottom: '10px'\n                }}\n                onChange={l1MonChange}\n                onSearch={l1MonSearch}\n                onSelect={l1MonSelect}\n                placeholder=\"Select a Movie...\"\n            />\n    )\n\n    // <----------------LEVEL ONE ACTOR SELECTION ------------------>\n\n    const [l1Avalue, l1AsetValue] = useState('');\n    const [l1Aoptions, l1AsetOptions] = useState([]);\n    const [l1Asource, l1AsetSource] = useState('')\n\n    const l1AonSearch = (searchText) => {\n        fetch(`http://localhost:3000/actors/auto_complete?input=${searchText}`)\n        .then(resp => resp.json())\n        .then(data => {\n            l1AsetOptions(\n          !searchText ? [] : data.map(person => (\n            { value: \n                <div className='autocomplete-container' actor_id={person.id} profile_path={person.profile_path} name={person.name}>\n                  <div className='autocomplete-one'>{person.name}</div>\n                  <div className='autocomplete-two'>\n                    <img src={person.profile_path ? `https://image.tmdb.org/t/p/w200${person.profile_path}` : silhouette } height='50px'></img>\n                  </div>\n                </div>\n                }\n            ))\n          )\n        })\n      };\n\n    const l1AonSelect = (data) => {\n        fetch(`http://localhost:3000/actors/get_photo?input=${data.props.actor_id}`)\n        .then(resp => resp.json())\n        .then(data => {\n            l1AsetValue (data.name)\n            l1AsetSource(data.profile_path)\n            setAnswer({...answer, target_c_id: data.id})\n        })\n    };\n\n    const l1AonChange = (data) => {\n        if (typeof data !== 'object') {\n            l1AsetValue(data);\n        }\n    };\n\n    const l1Aauto_complete_or_nothing = props.showing_result === true ? (\n        <><br></br></>\n      ) : (\n        <AutoComplete\n                  value={l1Avalue}\n                  options={l1Aoptions}\n                  style={{   \n                  width: 230,\n                  marginTop: '10px',\n                  marginBottom: '10px'\n                  }}\n                  onChange={l1AonChange}\n                  onSearch={l1AonSearch}\n                  onSelect={l1AonSelect}\n                  placeholder=\"Select an Actor...\"\n              />\n      )\n\n    const l1actor_image = l1Asource === '' || l1Msource === null ? (<img class='with-auto-complete' src={silhouette} height='200px'></img>) : (<img class='with-auto-complete' src={`https://image.tmdb.org/t/p/w200${l1Asource}`} alt={silhouette} height='200px'></img>)\n    const l2actor_image = l1Asource === '' || l1Msource === null ? (<img class='adjust-auto-complete' src={silhouette} height='200px'></img>) : (<img class='adjust-for-auto-complete' src={`https://image.tmdb.org/t/p/w200${l1Asource}`} alt={silhouette} height='200px'></img>)\n    // <----------------LEVEL TWO MOVIE SELECTION ------------------>\n    \n    const target_b_movies = props.target_b.movies.map(movie => (\n        {value:\n            <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n              <div className='small-challenge-autocomplete-one'>{movie.title}</div>\n              <div className='challenge-autocomplete-two'>\n                <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n              </div>\n            </div>\n        }\n    ))\n\n    const [l2Mvalue, l2MsetValue] = useState('');\n    const [l2Moptions, l2MsetOptions] = useState(target_b_movies);\n    const [l2Msource, l2MsetSource] = useState('')\n\n    const l2MonChange = (data) => {\n        if (typeof data !== 'object') {\n            l2MsetValue(data);\n        }\n      };\n\n    const l2MonSearch = (searchText) => {\n        fetch(`http://localhost:3000/movies/auto_complete?input=${searchText}&actor_id=${props.target_b.id}`)\n        .then(resp => resp.json())\n        .then(data => {\n            l2MsetOptions(\n        !searchText ? target_b_movies : data.map(movie => (\n            { value: \n                <div className='autocomplete-container' movie_id={movie.id} poster_path={movie.poster_path} title={movie.title}>\n                <div className='small-challenge-autocomplete-one'>{movie.title}</div>\n                <div className='challenge-autocomplete-two'>\n                    <img src={movie.poster_path ? `https://image.tmdb.org/t/p/w200${movie.poster_path}` : silhouette } height='50px'></img>\n                </div>\n                </div>\n                }\n            )))\n        })\n    };\n\n    const l2MonSelect = (data) => {\n        l2MsetValue(data.props.title)\n        l2MsetSource(data.props.poster_path)\n        setAnswer({...answer, movie_two_id: data.props.movie_id, target_b_id: props.target_b.id})\n        // props.updateFirstDegreeLink(props.target_a.id, data.props.movie_id, props.target_b.id)\n    };\n\n    const l2movie_poster = l2Msource === '' || l2Msource === null ? (<img class='with-auto-complete' src={poster_silhouette} height='200px'></img>) : (<img class='with-auto-complete' src={`https://image.tmdb.org/t/p/w200${l2Msource}`} alt={poster_silhouette} height='200px'></img>)\n\n    const l2Mauto_complete_or_nothing = props.showing_result === true ? (\n      <><br></br></>\n    ) : (\n      <AutoComplete\n                value={l2Mvalue}\n                options={l2Moptions}\n                style={{   \n                width: 230,\n                marginTop: '10px',\n                marginBottom: '10px'\n                }}\n                onChange={l2MonChange}\n                onSearch={l2MonSearch}\n                onSelect={l2MonSelect}\n                placeholder=\"Select a Movie...\"\n            />\n    )\n\n    const target_c_name = l1Avalue === '' ? ('Who') : (l1Avalue)\n    const l2message = props.showing_result !== true ? (\n        <p sytle='text-align: center'><Text keyboard>{target_c_name}</Text>{` was in what movie with `}<Text keyboard>{`${props.target_b.name}`}</Text>?</p>\n      ) : (\n        <p className='result-message' >{props.second_degree_result.message}</p>\n      )\n\n    const search_results_or_nothing = (props.showing_result === true && props.first_degree_result.result === false) ||\n    (props.showing_result === true && props.second_degree_result.result === false)  ? (<><Divider orientation=\"center\" style={{color: 'white'}}>HERE'S ONE POSSIBLE LINK:</Divider><SearchResults results={props.second_degree_result.results} loading={props.loading} /></>) : (<></>)\n\n    return (\n        <>\n        <div className={`slide-in-left ${background_class}`}>\n            <Divider orientation=\"center\">1 Degree</Divider>\n            <Row gutter={20} type=\"flex\" align=\"middle\">\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={4} offset={4}>\n                    <div>\n                        <img src={target_a_path} height='200px'></img>\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={2}>\n                    <div>\n                        <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                        {l1movie_poster}\n                    {/* <br></br> */}\n                        {/* {l1Mauto_complete_or_nothing} */}\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={2}>\n                    <div>\n                        <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row\" span={4}>\n                    <div>\n                        {l1actor_image}\n                        {/* <br></br> */}\n                        {/* {l1Aauto_complete_or_nothing} */}\n                    </div>\n                </Col>\n            </Row>\n\n            <Row gutter={21} type=\"flex\" align=\"middle\">\n                <Col span={6} offset={3}>\n                </Col>\n                <Col span={6}>\n                {l1Mauto_complete_or_nothing}\n                </Col>\n                <Col span={6}s>\n                {l1Aauto_complete_or_nothing}\n                </Col>\n            </Row>\n\n            {/* <br></br> */}\n            { l1message }    \n        </div>\n\n        <div className={`slide-in-right ${background_class2}`}>\n            <Divider orientation=\"center\">2 Degrees</Divider>\n            <Row gutter={20} type=\"flex\" align=\"middle\">\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={4} offset={4}>\n                    <div>\n                        {l1actor_image}\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={4}>\n                    <div>\n                    {l2movie_poster}\n                    {/* <br></br> */}\n                    {/* {l2Mauto_complete_or_nothing} */}\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={2}>\n                    <div>\n                    <RightCircleTwoTone style= {{fontSize: '50px'}} />\n                    </div>\n                </Col>\n                <Col className=\"gutter-row adjust-for-auto-complete\" span={4}>\n                    <div>\n                        <img src={target_b_path} height='200px'></img>\n                    </div>\n                </Col>\n            </Row>\n\n            <Row gutter={21} type=\"flex\" align=\"middle\">\n                <Col span={6} offset={3}>\n                </Col>\n                <Col span={6}>\n                {l2Mauto_complete_or_nothing}\n                </Col>\n                <Col span={6}>\n                </Col>\n            </Row>\n\n            {/* <br></br> */}\n            { l2message }    \n        </div>\n        \n        {search_results_or_nothing}\n        <br></br>\n        {submit_button}\n        </>\n    )\n}\n","/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LevelThreeChallenge.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"/Users/nickspangler/Flatiron/code/kevin-bacon-bits/frontend/src/components/six-degrees-challenge/LoadingAnswer.js",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"233","replacedBy":"237"},{"ruleId":"235","replacedBy":"238"},{"ruleId":"233","replacedBy":"239"},{"ruleId":"235","replacedBy":"240"},{"ruleId":"233","replacedBy":"241"},{"ruleId":"235","replacedBy":"242"},{"ruleId":"243","severity":1,"message":"244","line":2,"column":18,"nodeType":"245","messageId":"246","endLine":2,"endColumn":23},{"ruleId":"233","replacedBy":"247"},{"ruleId":"235","replacedBy":"248"},{"ruleId":"243","severity":1,"message":"249","line":4,"column":10,"nodeType":"245","messageId":"246","endLine":4,"endColumn":15},{"ruleId":"243","severity":1,"message":"250","line":2,"column":22,"nodeType":"245","messageId":"246","endLine":2,"endColumn":29},{"ruleId":"251","severity":1,"message":"252","line":19,"column":25,"nodeType":"253","endLine":19,"endColumn":57},{"ruleId":"233","replacedBy":"254"},{"ruleId":"235","replacedBy":"255"},{"ruleId":"251","severity":1,"message":"252","line":22,"column":17,"nodeType":"253","endLine":22,"endColumn":134},{"ruleId":"233","replacedBy":"256"},{"ruleId":"235","replacedBy":"257"},{"ruleId":"251","severity":1,"message":"252","line":22,"column":17,"nodeType":"253","endLine":22,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":7,"column":13,"nodeType":"253","endLine":7,"endColumn":50},{"ruleId":"251","severity":1,"message":"252","line":11,"column":13,"nodeType":"253","endLine":11,"endColumn":50},{"ruleId":"251","severity":1,"message":"252","line":7,"column":13,"nodeType":"253","endLine":7,"endColumn":50},{"ruleId":"251","severity":1,"message":"252","line":11,"column":13,"nodeType":"253","endLine":11,"endColumn":50},{"ruleId":"251","severity":1,"message":"252","line":19,"column":21,"nodeType":"253","endLine":19,"endColumn":61},{"ruleId":"251","severity":1,"message":"252","line":29,"column":21,"nodeType":"253","endLine":29,"endColumn":112},{"ruleId":"251","severity":1,"message":"252","line":39,"column":25,"nodeType":"253","endLine":39,"endColumn":65},{"ruleId":"243","severity":1,"message":"244","line":2,"column":24,"nodeType":"245","messageId":"246","endLine":2,"endColumn":29},{"ruleId":"251","severity":1,"message":"252","line":24,"column":19,"nodeType":"253","endLine":24,"endColumn":136},{"ruleId":"251","severity":1,"message":"252","line":72,"column":13,"nodeType":"253","endLine":72,"endColumn":47},{"ruleId":"251","severity":1,"message":"252","line":45,"column":33,"nodeType":"253","endLine":45,"endColumn":114},{"ruleId":"251","severity":1,"message":"252","line":16,"column":80,"nodeType":"253","endLine":16,"endColumn":156},{"ruleId":"251","severity":1,"message":"252","line":22,"column":17,"nodeType":"253","endLine":22,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":47,"column":68,"nodeType":"253","endLine":47,"endColumn":105},{"ruleId":"243","severity":1,"message":"258","line":3,"column":55,"nodeType":"245","messageId":"246","endLine":3,"endColumn":61},{"ruleId":"251","severity":1,"message":"252","line":22,"column":17,"nodeType":"253","endLine":22,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":48,"column":17,"nodeType":"253","endLine":48,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":63,"column":62,"nodeType":"253","endLine":63,"endColumn":106},{"ruleId":"251","severity":1,"message":"252","line":95,"column":21,"nodeType":"253","endLine":95,"endColumn":61},{"ruleId":"251","severity":1,"message":"252","line":115,"column":25,"nodeType":"253","endLine":115,"endColumn":65},{"ruleId":"243","severity":1,"message":"259","line":13,"column":11,"nodeType":"245","messageId":"246","endLine":13,"endColumn":22},{"ruleId":"251","severity":1,"message":"252","line":42,"column":17,"nodeType":"253","endLine":42,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":68,"column":21,"nodeType":"253","endLine":68,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":83,"column":70,"nodeType":"253","endLine":83,"endColumn":141},{"ruleId":"251","severity":1,"message":"252","line":124,"column":21,"nodeType":"253","endLine":124,"endColumn":138},{"ruleId":"251","severity":1,"message":"252","line":167,"column":69,"nodeType":"253","endLine":167,"endColumn":133},{"ruleId":"243","severity":1,"message":"260","line":168,"column":11,"nodeType":"245","messageId":"246","endLine":168,"endColumn":24},{"ruleId":"251","severity":1,"message":"252","line":168,"column":69,"nodeType":"253","endLine":168,"endColumn":135},{"ruleId":"251","severity":1,"message":"252","line":176,"column":17,"nodeType":"253","endLine":176,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":202,"column":21,"nodeType":"253","endLine":202,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":217,"column":70,"nodeType":"253","endLine":217,"endColumn":141},{"ruleId":"251","severity":1,"message":"252","line":254,"column":25,"nodeType":"253","endLine":254,"endColumn":65},{"ruleId":"251","severity":1,"message":"252","line":325,"column":25,"nodeType":"253","endLine":325,"endColumn":65},{"ruleId":"243","severity":1,"message":"261","line":8,"column":8,"nodeType":"245","messageId":"246","endLine":8,"endColumn":15},{"ruleId":"243","severity":1,"message":"259","line":15,"column":11,"nodeType":"245","messageId":"246","endLine":15,"endColumn":22},{"ruleId":"251","severity":1,"message":"252","line":46,"column":17,"nodeType":"253","endLine":46,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":72,"column":21,"nodeType":"253","endLine":72,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":87,"column":70,"nodeType":"253","endLine":87,"endColumn":141},{"ruleId":"251","severity":1,"message":"252","line":128,"column":21,"nodeType":"253","endLine":128,"endColumn":138},{"ruleId":"251","severity":1,"message":"252","line":171,"column":69,"nodeType":"253","endLine":171,"endColumn":133},{"ruleId":"243","severity":1,"message":"260","line":172,"column":11,"nodeType":"245","messageId":"246","endLine":172,"endColumn":24},{"ruleId":"251","severity":1,"message":"252","line":172,"column":69,"nodeType":"253","endLine":172,"endColumn":135},{"ruleId":"251","severity":1,"message":"252","line":196,"column":21,"nodeType":"253","endLine":196,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":211,"column":70,"nodeType":"253","endLine":211,"endColumn":141},{"ruleId":"251","severity":1,"message":"252","line":249,"column":21,"nodeType":"253","endLine":249,"endColumn":138},{"ruleId":"251","severity":1,"message":"252","line":301,"column":70,"nodeType":"253","endLine":301,"endColumn":134},{"ruleId":"243","severity":1,"message":"262","line":302,"column":11,"nodeType":"245","messageId":"246","endLine":302,"endColumn":24},{"ruleId":"251","severity":1,"message":"252","line":302,"column":69,"nodeType":"253","endLine":302,"endColumn":135},{"ruleId":"251","severity":1,"message":"252","line":311,"column":17,"nodeType":"253","endLine":311,"endColumn":130},{"ruleId":"251","severity":1,"message":"252","line":337,"column":21,"nodeType":"253","endLine":337,"endColumn":134},{"ruleId":"251","severity":1,"message":"252","line":352,"column":70,"nodeType":"253","endLine":352,"endColumn":141},{"ruleId":"251","severity":1,"message":"252","line":390,"column":25,"nodeType":"253","endLine":390,"endColumn":65},{"ruleId":"251","severity":1,"message":"252","line":513,"column":25,"nodeType":"253","endLine":513,"endColumn":65},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],["263"],["264"],["263"],["264"],["263"],["264"],"no-unused-vars","'Space' is defined but never used.","Identifier","unusedVar",["263"],["264"],"'Badge' is defined but never used.","'Divider' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["263"],["264"],["263"],["264"],"'Button' is defined but never used.","'level_class' is assigned a value but never used.","'l2actor_image' is assigned a value but never used.","'Loading' is defined but never used.","'l3actor_image' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]